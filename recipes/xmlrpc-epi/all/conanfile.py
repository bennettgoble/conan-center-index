from conan import ConanFile
from conan.tools.apple import fix_apple_shared_install_name
from conan.tools.build import cross_building
from conan.tools.env import VirtualBuildEnv, VirtualRunEnv
from conan.tools.files import apply_conandata_patches, copy, export_conandata_patches, get, replace_in_file, chdir
from conan.tools.gnu import Autotools, AutotoolsDeps, AutotoolsToolchain, PkgConfigDeps
from conan.tools.layout import basic_layout
from conan.tools.microsoft import is_msvc
from conan.tools.microsoft import MSBuild, MSBuildDeps, MSBuildToolchain
import os


required_conan_version = ">=1.54.0"


class PackageConan(ConanFile):
    name = "xmlrpc-epi"
    description = "An implementation of the xmlrpc protocol in C"
    license = "MIT"
    homepage = "https://xmlrpc-epi.sourceforge.net/"
    url = "https://github.com/conan-io/conan-center-index"
    topics = ("xml-rpc", "http")
    package_type = "library"
    settings = "os", "arch", "compiler", "build_type"
    options = {
        "shared": [True, False],
        "fPIC": [True, False],
    }
    default_options = {
        "shared": False,
        "fPIC": True,
    }

    @property
    def _settings_build(self):
        return getattr(self, "settings_build", self.settings)

    def export_sources(self):
        export_conandata_patches(self)

    def config_options(self):
        if self.settings.os == "Windows":
            del self.options.fPIC

    def configure(self):
        if self.options.shared:
            self.options.rm_safe("fPIC")
        self.settings.rm_safe("compiler.cppstd")
        self.settings.rm_safe("compiler.libcxx")

    def layout(self):
        basic_layout(self, src_folder="src")

    def requirements(self):
        self.requires("expat/[>2]")
        if self.settings.os in ("Windows", "Macos"):
            self.requires("libiconv/[>1]")

    def source(self):
        get(self, **self.conan_data["sources"][self.version], strip_root=True)

    def _msbuild_build(self):
        # Upgrade ancient vcproj file
        with chdir(self, self.source_folder):
        #with tools.vcvars(self.settings):
            self.run("devenv /Upgrade xmlrpcepi.sln")

            # Allows to inject platform toolset, and props file generated by MSBuildToolchain & MSBuildDeps
            # TODO: to remove once https://github.com/conan-io/conan/pull/12817 available in conan client
            vcxproj_files = ["xmlrpcepi.vcxproj"]
            import_conan_generators = ""
            for props_file in ["conantoolchain.props", "conandeps.props"]:
                props_path = os.path.join(self.generators_folder, props_file)
                if os.path.exists(props_path):
                    import_conan_generators += f"<Import Project=\"{props_path}\" />"
            for vcxproj_file in vcxproj_files:
                if props_path:
                    replace_in_file(
                        self, vcxproj_file,
                        "<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />",
                        f"{import_conan_generators}<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />",
                    )
            msbuild = MSBuild(self)
            msbuild.build(sln=os.path.join(self.source_folder, "xmlrpcepi.sln"), targets=["xmlrpcepi"])

    def _msbuild_generate(self):
        tc = MSBuildToolchain(self)
        # tc.configuration = self._msbuild_configuration
        tc.generate()

        deps = MSBuildDeps(self)
        # deps.configuration = self._msbuild_configuration
        deps.generate()

    def _autotools_generate(self):
        env = VirtualBuildEnv(self)
        env.generate()

        if not cross_building(self):
            env = VirtualRunEnv(self)
            env.generate(scope="build")

        tc = AutotoolsToolchain(self)
        # Add the src dir of the library to the include path so
        # that the sample project can build.
        tc.extra_cflags.append(f"-I{self.source_folder}/src")
        tc.generate()

        tc = PkgConfigDeps(self)
        tc.generate()

        tc = AutotoolsDeps(self)
        tc.generate()

    def generate(self):
        if is_msvc(self):
            self._msbuild_generate()
        else:
            self._autotools_generate()

    def _autotools_build(self):
        autotools = Autotools(self)
        autotools.configure()
        autotools.make()

    def build(self):
        apply_conandata_patches(self)
        if is_msvc(self):
            self._msbuild_build()
        else:
            self._autotools_build()

    def _autotools_package(self):
        autotools = Autotools(self)
        autotools.install()
        fix_apple_shared_install_name(self)

    def _msbuild_package(self):
        copy(self, pattern="*.lib", dst=os.path.join(self.package_folder, "lib"), src=self.build_folder)
        copy(self, pattern="*.h", dst=os.path.join(self.package_folder, "include"), src=self.source_folder)

    def package(self):
        copy(self, pattern="COPYING", dst=os.path.join(self.package_folder, "licenses"), src=self.source_folder)
        copy(self, pattern="AUTHORS", dst=os.path.join(self.package_folder, "licenses"), src=self.source_folder)
        if is_msvc(self):
            self._msbuild_package()
        else:
            self._autotools_package()

    def package_info(self):
        self.cpp_info.libs = ["xmlrpc-epi"]
